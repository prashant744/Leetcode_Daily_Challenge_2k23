class UnionFind {
    vector<int> parent;
    vector<int> size;
public:
    UnionFind(int n) {
        parent.resize(n);
        size.resize(n, 1);
        for (int i = 0; i < n; ++i) parent[i] = i;
    }

    int Find(int u) {
        if (u == parent[u]) return u;
        return parent[u] = Find(parent[u]); 
    }

    bool Union(int u, int v) {
        int pu = Find(u), pv = Find(v);
        if (pu == pv) return false;
        if (size[pu] < size[pv]) {
            size[pv] += size[pu];
            parent[pu] = pv;
        } else {
            size[pu] += size[pv];
            parent[pv] = pu;
        }
        return true;
    }
};

class Solution {
public:
    int numSimilarGroups(vector<string>& strs) {
        int n = strs.size();
        int groups = n;

        UnionFind makeUf(n);
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (isSimilar(strs[i], strs[j]) && makeUf.Union(i, j))
                    groups -= 1;
        return groups;
    }

    bool isSimilar(const string& str1, const string& str2) {
        int dif1 = -1, dif2 = -1;
        for (int i = 0; i < str1.size(); ++i) {
            if (str1[i] != str2[i]) {
                if (dif1 == -1) dif1 = i;
                else if (dif2 == -1) dif2 = i;
                else return false;
            }
        }
        if (dif1 == -1) return true; 
        if (dif2 == -1) return false; 
        return str1[dif1] == str2[dif2] && str1[dif2] == str2[dif1];
    }
};