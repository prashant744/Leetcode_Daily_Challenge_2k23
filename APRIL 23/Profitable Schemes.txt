class Solution {
public:
    // int dp[102][102][102];
    int MOD=1e9+7;

    // int helper(int k,int i,int j,int n,int minProfit,vector<int>&group,vector<int>&profit){
    //     if(k==profit.size()){
    //         if(j>=minProfit && n>=i){
    //             return 1;
    //         }
    //         return 0;
    //     }else if(n<i){
    //         return 0;
    //     }

    //     if(dp[k][i][j]!=-1){
    //         return dp[k][i][j];
    //     }
    //     int take=0,notTake=0;
    //     notTake=helper(k+1,i,j,n,minProfit,group,profit);
    //     take=helper(k+1,i+group[k],min(j+profit[k],minProfit),n,minProfit,group,profit);
    //     return dp[k][i][j]=(take%MOD+notTake%MOD)%MOD;
    // }

    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        // memset(dp,-1,sizeof(dp));
        // return helper(0,0,0,n,minProfit,group,profit);

        int sum=0;
        vector<vector<int>>dp(n+1,vector<int>(minProfit+1,0));
        dp[0][0]=1;

        for(int k=0;k<group.size();k++){
            int gro=group[k];
            int pro=profit[k];
            
            for(int i=n;i>=gro;i--){
                for(int j=minProfit;j>=0;j--){
                    dp[i][j]=(dp[i][j]+dp[i-gro][max(0,j-pro)])%MOD;
                }
            }
        }
        for(int i=0;i<=n;i++){
            sum=(sum+dp[i][minProfit])%MOD;
        }
        return sum;
    }
};